name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
variables:
- template: ProjectReunion-Versions.yml
- template: ProjectReunion-CommonVariables.yml

parameters:
  - name: "ReleaseSigning"
    type: boolean
    default: False
  - name: "PublishToMaestro"
    type: boolean
    default: False

jobs:
- job: CredScan
  pool:
    vmImage: 'windows-2019'
  steps:
  # Scans the root source folder for security vulnerability
  - task: CredScan@2
    inputs:
      toolMajorVersion: 'V2'

  # This PostAnalysis will fail the pipeline if CredScan identifies an issue
  - task: PostAnalysis@1
    inputs:
      AllTools: false
      APIScan: false
      BinSkim: false
      CodesignValidation: false
      CredScan: true
      FortifySCA: false
      FxCop: false
      ModernCop: false
      PoliCheck: false
      RoslynAnalyzers: false
      SDLNativeRules: false
      Semmle: false
      TSLint: false
      ToolLogsNotFoundAction: 'Standard'

- job: Build
  # Skip the build job if we are reusing the output of a previous build.
  # useBuildOutputFromBuildId variable is set on the Pipeline at Queue time.
  condition:
    eq(variables['useBuildOutputFromBuildId'],'')
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  strategy:
    maxParallel: 10
    matrix:
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
        normalizedConfiguration: 'fre'
        PGOBuildMode: 'Optimize'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
        normalizedConfiguration: 'fre'
        PGOBuildMode: 'Optimize'
      Release_Arm64:
        buildPlatform: 'arm64'
        buildConfiguration: 'Release'
        normalizedConfiguration: 'fre'

  variables:
    buildOutputDir : $(Build.SourcesDirectory)\BuildOutput
    publishDir : $(Build.ArtifactStagingDirectory)
  steps:
  # Download and extract nuget package with non-stubbed MicrosoftTelemetry.h header
#  - task: DownloadPackage@1
#    displayName: 'Download Microsoft.Telemetry.Inbox.Native'
#    inputs:
#      feed: '/3415933f-ac0d-4766-8c0a-3f4c247c25f5'                         # 0
#      view: 'ef61a1c1-003b-4a27-bde5-beec8301021b'                          # Release
#      definition: '2fe60c09-c66f-4275-ae2d-f015c7170c72'                    # Microsoft.Telemetry.Inbox.Native
#      version: '10.0.18362.1-190318-1202.19h1-release.amd64fre'             # latest version
#      downloadPath: '$(System.DefaultWorkingDirectory)'                     # download and extract to repo root

  # Replace the stubbed MicrosoftTelemetry.h with the real one
  # Delete the existing stubbed MicrosoftTelemetry.h first, to ensure that if it is no longer at the expected path that the task, and build, fails
#  - script: |
#     del $(System.DefaultWorkingDirectory)\dev\telemetry\MicrosoftTelemetry.h
#     move /Y $(System.DefaultWorkingDirectory)\build\native\inc\MicrosoftTelemetry.h $(System.DefaultWorkingDirectory)\dev\telemetry\
#    failOnStderr: true
#    displayName: 'Replace existing stubbed MicrosoftTelemetry.h header with the real version from the nuget package'

  - template: AzurePipelinesTemplates\ProjectReunion-BuildDevProject-Steps.yml

  - template: AzurePipelinesTemplates\ProjectReunion-PublishProjectOutput-Steps.yml

# component detection must happen *within* the build task
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0

  - task: BinSkim@3
    inputs:
      InputType: 'Basic'
      Function: 'analyze'
      AnalyzeTarget: '$(Build.ArtifactStagingDirectory)\*.dll;$(Build.ArtifactStagingDirectory)\*.exe'
      AnalyzeVerbose: true
  - task: PostAnalysis@1
    inputs:
      AllTools: false
      APIScan: false
      BinSkim: true
      BinSkimBreakOn: 'Error'
      CodesignValidation: false
      CredScan: false
      FortifySCA: false
      FxCop: false
      ModernCop: false
      PoliCheck: false
      RoslynAnalyzers: false
      SDLNativeRules: false
      Semmle: false
      TSLint: false
      ToolLogsNotFoundAction: 'Standard'


- job: BuildMRT
  pool:
    vmImage: 'windows-latest'
  strategy:
    maxParallel: 10
    matrix:
      Release_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Release'
      Release_x64:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
      Release_Arm64:
        buildPlatform: 'ARM64'
        buildConfiguration: 'Release'
  steps:
  - template: build-mrt.yml
    parameters:
      buildJobName: 'BuildMRTCore'

  - task: BinSkim@3
    inputs:
      InputType: 'Basic'
      Function: 'analyze'
      AnalyzeTarget: '$(Build.ArtifactStagingDirectory)\*.dll;$(Build.ArtifactStagingDirectory)\*.exe'
      AnalyzeVerbose: true
  - task: PostAnalysis@1
    inputs:
      AllTools: false
      APIScan: false
      BinSkim: true
      BinSkimBreakOn: 'Error'
      CodesignValidation: false
      CredScan: false
      FortifySCA: false
      FxCop: false
      ModernCop: false
      PoliCheck: false
      RoslynAnalyzers: false
      SDLNativeRules: false
      Semmle: false
      TSLint: false
      ToolLogsNotFoundAction: 'Standard'

- job: PublishMRT
  dependsOn:
    - BuildMRT
  condition: in(dependencies.BuildMRT.result, 'Succeeded')
  pool:
    vmImage: 'windows-latest'
  steps:
  - template: publish-mrt.yml

- job: SignBinariesAndPublishSymbols
  variables:
    signingPattern: |
        lib\uap10.0\*.winmd
        lib\net5.0-windows\*.dll
        runtimes\*\*\*.dll
  dependsOn:
    - Build
    - PublishMRT
  condition: |
    and
    (
      in(dependencies.PublishMRT.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
    )
  pool:
    name: Package ES Lab E

  steps:
  - task: DownloadBuildArtifacts@0
    condition:
      eq(variables['useBuildOutputFromBuildId'],'')
    inputs:
      artifactName: FullNuget
      downloadPath: '$(Build.ArtifactStagingDirectory)'

  - task: DownloadBuildArtifacts@0
    condition:
      ne(variables['useBuildOutputFromBuildId'],'')
    inputs:
      buildType: specific
      buildVersionToDownload: specific
      project: $(System.TeamProjectId)
      pipeline: $(System.DefinitionId)
      buildId: $(useBuildOutputFromBuildId)
      artifactName: FullNuget
      downloadPath: '$(Build.ArtifactStagingDirectory)'

  - task: CmdLine@1
    displayName: 'Display build machine environment variables'
    inputs:
      filename: 'set'

  - script: cmd /c dir /s /b $(Build.ArtifactStagingDirectory)
    displayName: Dump artifact staging directory

  - template: AzurePipelinesTemplates\ProjectReunion-PopulateBuildDateAndRevision-Steps.yml

  - task: CopyFiles@2
    displayName: 'Copy symbols to artifact staging directory'
    condition: always()
    inputs:
      sourceFolder: $(Build.ArtifactStagingDirectory)\fullnuget
      contents: |
        **\*.pdb
      targetFolder: $(Build.ArtifactStagingDirectory)\symbols

# dump symbols artifact directory - this is normally turned off
#  - script: |
#      echo $(Build.ArtifactStagingDirectory)\symbols
#      dir /s $(Build.ArtifactStagingDirectory)\symbols

  - task: PublishSymbols@2
    displayName: 'Publish private symbols to internal server (without source indexing)'
    inputs:
      searchPattern: '$(Build.ArtifactStagingDirectory)\symbols\**\*.pdb'
      symbolServerType: 'TeamServices'
    # This ADO task does not support indexing of github sources currently :-(      
      indexSources: false 
      detailedLog: true
    # There is a bug which causes this task to fail if LIB includes an inaccessible path (even though it does not depend on it).
    # To work around this issue, we just force LIB to be any dir that we know exists.
    env:
      LIB: $(Build.SourcesDirectory)

  - task: PublishSymbols@2
    displayName: 'Publish symbols to public server(without source indexing)'
    inputs:
      searchPattern: '$(Build.ArtifactStagingDirectory)\symbols\**\*.pdb'
      symbolServerType: 'TeamServices'
    # This ADO task does not support indexing of github sources currently :-(      
      indexSources: false 
      detailedLog: true
    # There is a bug which causes this task to fail if LIB includes an inaccessible path (even though it does not depend on it).
    # To work around this issue, we just force LIB to be any dir that we know exists.
    env:
      LIB: $(Build.SourcesDirectory)
      ArtifactServices_Symbol_AccountName: microsoftpublicsymbols
      ArtifactServices_Symbol_UseAAD: true

  - task: EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: 'Project Reunion ESRP Code Signing Connection'
      FolderPath: '$(Build.ArtifactStagingDirectory)\fullnuget'
      Pattern: $(signingPattern)
      UseMinimatch: true
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
          {
            "keyCode": "CP-230012",
            "operationSetCode": "SigntoolSign",
            "parameters": [
              {
                "parameterName": "OpusName",
                "parameterValue": "Microsoft"
              },
              {
                "parameterName": "OpusInfo",
                "parameterValue": "http://www.microsoft.com"
              },
              {
                "parameterName": "PageHash",
                "parameterValue": "/NPH"
              },
              {
                "parameterName": "FileDigest",
                "parameterValue": "/fd sha256"
              },
              {
                "parameterName": "TimeStamp",
                "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              }
            ],
            "toolName": "signtool.exe",
            "toolVersion": "6.2.9304.0"
          }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
    condition:
      eq(${{ parameters.ReleaseSigning }}, true)

  - task: EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: 'Project Reunion ESRP Code Signing Connection'
      FolderPath: '$(Build.ArtifactStagingDirectory)\fullnuget'
      Pattern: $(signingPattern)
      UseMinimatch: true
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
          {
            "keyCode": "CP-230072",
            "operationSetCode": "SigntoolSign",
            "parameters": [
              {
                "parameterName": "OpusName",
                "parameterValue": "Microsoft"
              },
              {
                "parameterName": "OpusInfo",
                "parameterValue": "http://www.microsoft.com"
              },
              {
                "parameterName": "PageHash",
                "parameterValue": "/NPH"
              },
              {
                "parameterName": "FileDigest",
                "parameterValue": "/fd sha256"
              },
              {
                "parameterName": "TimeStamp",
                "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              }
            ],
            "toolName": "signtool.exe",
            "toolVersion": "6.2.9304.0"
          }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
    condition:
      eq(${{ parameters.ReleaseSigning }}, false)

  # Re-publish signed artifacts to the fullnuget artifact.
  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: FullN'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\fullnuget'
      artifactName: 'FullNuget'

# Create Nuget Package
- template: AzurePipelinesTemplates\ProjectReunion-CreateNugetPackage-Job.yml
  parameters:
    jobName: CreateNugetPackage
    dependsOn: SignBinariesAndPublishSymbols
    signConfigPattern: 'Microsoft.ProjectReunion*.nupkg'
    useReleaseTag: '$(ProjectReunionFinalRelease)'
    prereleaseVersionTag: nightly
    ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
      publishToMaestro: True
    ${{ if ne(variables['Build.Reason'], 'Schedule') }}:
      publishToMaestro: ${{ parameters.PublishToMaestro }}

# Build solution that depends on nuget package
#- template: AzurePipelinesTemplates\ProjectReunion-NugetReleaseTest-Job.yml
#  parameters:
#    buildJobName: 'BuildNugetPkgTests'
#    buildArtifactName: 'NugetPkgTestsDrop'
#    runTestJobName: 'RunNugetPkgTestsInHelix'
#    helixType: 'test/nuget'
#    dependsOn: CreateNugetPackage
#    pkgArtifactPath: '$(artifactDownloadPath)\fullnuget'

# Framework package tests
#- template: AzurePipelinesTemplates\ProjectReunion-NugetReleaseTest-Job.yml
#  parameters:
#    buildJobName: 'BuildFrameworkPkgTests'
#    buildArtifactName: 'FrameworkPkgTestsDrop'
#    runTestJobName: 'RunFrameworkPkgTestsInHelix'
#    helixType: 'test/frpkg'
#    dependsOn: CreateNugetPackage
#    pkgArtifactPath: '$(artifactDownloadPath)\fullnuget\FrameworkPackage'

#- template: AzurePipelinesTemplates\ProjectReunion-ProcessTestResults-Job.yml
#  parameters:
#    dependsOn:
#    - RunNugetPkgTestsInHelix
#    - RunFrameworkPkgTestsInHelix
#    rerunPassesRequiredToAvoidFailure: 5
#    minimumExpectedTestsExecutedCount: $(minimumExpectedTestsExecutedCount)

# NuGet package WACK tests
#- template: AzurePipelinesTemplates\ProjectReunion-WACKTests-Job.yml
#  parameters:
#    name: 'NugetPkgWACKTests'
#    dependsOn: BuildNugetPkgTests
#    artifactName: 'NugetPkgTestsDrop'

# Framework package WACK tests
#- template: AzurePipelinesTemplates\ProjectReunion-WACKTests-Job.yml
#  parameters:
#    name: 'FrameworkPkgWACKTests'
#    dependsOn: BuildFrameworkPkgTests
#    artifactName: 'FrameworkPkgTestsDrop'
