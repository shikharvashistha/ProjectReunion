parameters:
  name: 'RunTestsInHelix'
  dependsOn: ''
  condition: ''
  testSuite: 'DevTestSuite'
  # If a Pipeline runs this template more than once, this parameter should be unique per build flavor to differentiate the
  # the different test runs:
  helixType: 'test/devtest'
  maxParallel: 4
  rerunPassesRequiredToAvoidFailure: 5
  taefQuery: ''
  # if 'useBuildOutputFromBuildId' is set, we will default to using a build from this pipeline:
  useBuildOutputFromPipeline: $(System.DefinitionId)
  matrix: 
    Release_x86:
      buildPlatform: 'x86'
      buildConfiguration: 'Release'
      outputDirectory: BuildOutput\Release\x86\BaseUnitTests\
    Release_x64:
      buildPlatform: 'x64'
      buildConfiguration: 'Release'
      outputDirectory: BuildOutput\Release\x64\BaseUnitTests\

jobs:
- job: ${{ parameters.name }}
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  strategy:
    maxParallel: ${{ parameters.maxParallel }}
    matrix: ${{ parameters.matrix }}
  variables:
    artifactsDir: $(Build.SourcesDirectory)\Artifacts
    taefPath: $(Build.SourcesDirectory)\build\Helix\packages\taef.redist.wlk.10.31.180822002\build\Binaries\$(buildPlatform)
    helixCommonArgs: '/binaryLogger:$(Build.SourcesDirectory)/${{parameters.name}}.$(buildPlatform).$(buildConfiguration).binlog /p:HelixBuild=$(Build.BuildId).$(buildPlatform).$(buildConfiguration) /p:Platform=$(buildPlatform) /p:Configuration=$(buildConfiguration) /p:HelixType=${{parameters.helixType}} /p:TestSuite=${{parameters.testSuite}} /p:ProjFilesPath=$(Build.ArtifactStagingDirectory) /p:rerunPassesRequiredToAvoidFailure=${{parameters.rerunPassesRequiredToAvoidFailure}}'
      
  steps:
  - task: CmdLine@1
    displayName: 'Display build machine environment variables'
    inputs:
      filename: 'set'
      
  - task: NuGetToolInstaller@0

  - task: NuGetAuthenticate@0

  # TODO: Should we be pulling in a copy of TAEF here, or use TAEF from the MRTCore bits instead?

  # In the dev.azure.com/microsoft account, 'NuGetCommand' is ambiguous so the specific task guid must be used instead
  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
    displayName: 'NuGet restore build/Helix/packages.config'
    inputs:
      command: 'restore'
      restoreSolution: test/Helix/packages.config
      feedsToUse: config
      nugetConfigPath: build/Helix/nuget.config
      restoreDirectory: packages
      
  - task: CmdLine@1
    displayName: 'DIAG: dump packages'
    inputs:
      filename: 'tree /f /a $(Build.SourcesDirectory)\packages'

  - task: DownloadBuildArtifacts@0
    displayName: 'Download: Binaries'
    inputs:
      artifactName: 'mrtcore_test_binaries_$(buildPlatform)'
      downloadPath: '$(Build.ArtifactStagingDirectory)\bits'

  - task: CmdLine@1
    displayName: 'DIAG: dump packages'
    inputs:
      filename: 'tree /f /a $(Build.ArtifactStagingDirectory)\bits'



  # - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  #   displayName: 'NuGet restore MRTCore unit tests'
  #   inputs:
  #     command: 'custom'
  #     arguments: 'restore dev\MRTCore\mrt\mrm\unittests\packages.config -ConfigFile nuget.config -PackagesDirectory dev\MRTCore\mrt\packages'
      
  # - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
  #   displayName: Restore NuGet Packages for Taef
  #   inputs:
  #     restoreSolution: build/Helix/packages.config
  #     feedsToUse: config
  #     nugetConfigPath: nuget.config
  #     restoreDirectory: dev\MRTCore\mrt\packages
      
  # - task: VSBuild@1
  #   displayName: Build solution BaseUnitTest
  #   inputs:
  #     solution: dev/MRTCore/mrt/mrm/UnitTests/BaseUnitTests.vcxproj
  #     platform: $(buildPlatform)
  #     configuration: $(buildConfiguration)

#  These test projects need to be converted over to TAEF in order to be run on helix queues      
#  - task: VSBuild@1
#    displayName: Build solution UnitTests
#    inputs:
#      solution: dev/MRTCore/mrt/core/unittests/UnitTest.vcxproj
#      platform: $(buildPlatform)
#      configuration: $(buildConfiguration)
#  - task: MSBuild@1
#    displayName: Build solution ManagedTests
#    inputs:
#      solution: dev/MRTCore/mrt/Microsoft.ApplicationModel.Resources/unittests/ManagedTest.csproj
#      platform: $(buildPlatform)
#      configuration: $(buildConfiguration)  

  # - task: PowerShell@2
  #   displayName: Collect Build Outputs
  #   inputs:
  #     targetType: inline
  #     script: >
  #       mkdir $(buildPlatform)-$(buildConfiguration)-taeftest

  #       cp $(outputDirectory)/*.dll $(buildPlatform)-$(buildConfiguration)-taeftest

  #       cp $(outputDirectory)/*.pdb $(buildPlatform)-$(buildConfiguration)-taeftest

  #       dir $(buildPlatform)-$(buildConfiguration)-taeftest
        
  # - task: PublishBuildArtifacts@1
  #   displayName: Publish Build Outputs
  #   inputs:
  #     PathtoPublish: $(buildPlatform)-$(buildConfiguration)-taeftest
  #     ArtifactName: $(buildPlatform)-$(buildConfiguration)-taeftest
  #     publishLocation: Container
      
  # - task: powershell@2
  #   displayName: 'PrepareHelixPayload.ps1'
  #   inputs:
  #     targetType: filePath
  #     filePath: build\Helix\PrepareHelixPayload.ps1
  #     arguments: -Platform '$(buildPlatform)' -Configuration '$(buildConfiguration)'
      
  # - task: DotNetCoreCLI@2
  #   displayName: Run tests in Helix
  #   env:
  #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  #   inputs:
  #     command: custom
  #     projects: build/Helix/RunTestsInHelix.proj
  #     custom: msbuild
  #     arguments: /p:HelixBuild=$(Build.BuildId).$(buildPlatform).$(buildConfiguration) /p:Platform=$(buildPlatform) /p:Configuration=$(buildConfiguration) /p:TestSuite=${{parameters.TestSuite}} /p:IsExternal=true /p:Creator=ProjectReunion
 